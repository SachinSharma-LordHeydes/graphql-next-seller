// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client {
//   provider        = "prisma-client-js"
//   previewFeatures = ["filterJson", "fullTextSearch"]
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// ───────────────────────────────────────────────────────────────────────────────
// ENUMS
// ───────────────────────────────────────────────────────────────────────────────
enum Role {
  BUYER
  SELLER
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
  BUSINESS
  WAREHOUSE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  WALLET
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  LOST
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  OVERNIGHT
  SAME_DAY
}

// ───────────────────────────────────────────────────────────────────────────────
// MODELS
// ───────────────────────────────────────────────────────────────────────────────

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique @db.VarChar(255)
  firstName String
  lastName  String
  phone     String?  @db.VarChar(20)
  role      Role     @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  addresses      Address[]       @relation("UserAddresses")
  paymentMethods PaymentMethod[] @relation("UserPayments")
  cartItems      CartItem[]      @relation("UserCartItems")
  orders         Order[]         @relation("BuyerOrders")
  reviews        Review[]
  products       Product[]       @relation("SellerProducts")
  payouts        Payout[]        @relation("SellerPayouts")
  sellerOrders   SellerOrder[]   @relation("SellerOrders")
  Wishlist       Wishlist[]

  @@index([email, role])
  @@map("users")
}

model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType
  label      String?
  line1      String
  line2      String?
  city       String
  state      String
  country    String      @default("NP")
  postalCode String
  phone      String?     @db.VarChar(20)
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user User @relation("UserAddresses", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@map("addresses")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([slug])
  @@map("categories")
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("brands")
}

model Product {
  id          String        @id @default(cuid())
  sellerId    String
  name        String
  slug        String        @unique
  description String?
  status      ProductStatus @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  seller       User             @relation("SellerProducts", fields: [sellerId], references: [id], onDelete: Cascade)
  variants     ProductVariant[]
  images       ProductImage[]
  reviews      Review[]
  Category     Category?        @relation(fields: [categoryId], references: [id])
  categoryId   String?
  Brand        Brand?           @relation(fields: [brandId], references: [id])
  brandId      String?
  WishlistItem WishlistItem[]

  @@index([slug, sellerId])
  @@map("products")
}

model ProductVariant {
  id         String   @id @default(cuid())
  productId  String
  sku        String   @unique
  price      Decimal  @db.Money
  stock      Int      @default(0)
  attributes Json? // e.g. { size: "M", color: "Red" }
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems       CartItem[]
  orderItems      OrderItem[]
  SellerOrderItem SellerOrderItem[]

  @@index([sku, price])
  @@map("product_variants")
}

model ProductImage {
  id        String  @id @default(cuid())
  variantId String?
  productId String
  url       String
  altText   String?
  sortOrder Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  variantId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User           @relation("UserCartItems", fields: [userId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, variantId])
  @@index([userId])
  @@map("cart_items")
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  buyerId          String
  status           OrderStatus @default(PENDING)
  shippingSnapshot Json // captures address at order time
  billingSnapshot  Json?
  subtotal         Decimal     @db.Money
  tax              Decimal     @default(0) @db.Money
  shippingFee      Decimal     @default(0) @db.Money
  discount         Decimal     @default(0) @db.Money
  total            Decimal     @db.Money
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  buyer     User        @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  payments  Payment[]
  shipments Shipment[]

  @@index([buyerId, status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  variantId  String
  quantity   Int
  unitPrice  Decimal  @db.Money
  totalPrice Decimal  @db.Money
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

model PaymentMethod {
  id          String            @id @default(cuid())
  userId      String
  type        PaymentMethodType
  provider    String
  last4       String?
  expiryMonth Int?
  expiryYear  Int?
  upiId       String?
  isDefault   Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user    User      @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  Payment Payment[]

  @@index([userId, type])
  @@map("payment_methods")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  methodId      String?
  amount        Decimal       @db.Money
  currency      String        @default("NERU")
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  provider      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order  Order          @relation(fields: [orderId], references: [id])
  method PaymentMethod? @relation(fields: [methodId], references: [id])

  @@index([orderId, status])
  @@map("payments")
}

model Shipment {
  id                String         @id @default(cuid())
  orderId           String
  trackingNumber    String?        @unique
  carrier           String?
  method            ShippingMethod @default(STANDARD)
  status            ShipmentStatus @default(PENDING)
  shippedAt         DateTime?
  deliveredAt       DateTime?
  estimatedDelivery DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId, status])
  @@map("shipments")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([productId, rating])
  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  name      String   @default("My Wishlist")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WishlistItem[]

  @@index([userId])
  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@map("wishlist_items")
}

model SellerOrder {
  id           String      @id @default(cuid())
  sellerId     String
  buyerOrderId String
  status       OrderStatus @default(PENDING)
  subtotal     Decimal     @db.Money
  tax          Decimal     @default(0) @db.Money
  shippingFee  Decimal     @default(0) @db.Money
  commission   Decimal     @default(0) @db.Money
  total        Decimal     @db.Money
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  seller User              @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade)
  items  SellerOrderItem[]

  @@index([sellerId, status])
  @@map("seller_orders")
}

model SellerOrderItem {
  id            String   @id @default(cuid())
  sellerOrderId String
  variantId     String
  quantity      Int
  unitPrice     Decimal  @db.Money
  totalPrice    Decimal  @db.Money
  commission    Decimal  @db.Money
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sellerOrder SellerOrder    @relation(fields: [sellerOrderId], references: [id], onDelete: Cascade)
  variant     ProductVariant @relation(fields: [variantId], references: [id])

  @@map("seller_order_items")
}

model Payout {
  id           String        @id @default(cuid())
  sellerId     String
  amount       Decimal       @db.Money
  currency     String        @default("USD")
  status       PaymentStatus @default(PENDING)
  scheduledFor DateTime
  processedAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  seller User @relation("SellerPayouts", fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId, status])
  @@map("payouts")
}
